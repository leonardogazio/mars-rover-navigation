// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarsRoverNavigateServiceClient is the client API for MarsRoverNavigateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarsRoverNavigateServiceClient interface {
	Rotate(ctx context.Context, in *RotateReq, opts ...grpc.CallOption) (*RoverPosition, error)
	GoForward(ctx context.Context, in *GoForwardReq, opts ...grpc.CallOption) (*RoverPosition, error)
}

type marsRoverNavigateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarsRoverNavigateServiceClient(cc grpc.ClientConnInterface) MarsRoverNavigateServiceClient {
	return &marsRoverNavigateServiceClient{cc}
}

func (c *marsRoverNavigateServiceClient) Rotate(ctx context.Context, in *RotateReq, opts ...grpc.CallOption) (*RoverPosition, error) {
	out := new(RoverPosition)
	err := c.cc.Invoke(ctx, "/pb.MarsRoverNavigateService/Rotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marsRoverNavigateServiceClient) GoForward(ctx context.Context, in *GoForwardReq, opts ...grpc.CallOption) (*RoverPosition, error) {
	out := new(RoverPosition)
	err := c.cc.Invoke(ctx, "/pb.MarsRoverNavigateService/GoForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarsRoverNavigateServiceServer is the server API for MarsRoverNavigateService service.
// All implementations must embed UnimplementedMarsRoverNavigateServiceServer
// for forward compatibility
type MarsRoverNavigateServiceServer interface {
	Rotate(context.Context, *RotateReq) (*RoverPosition, error)
	GoForward(context.Context, *GoForwardReq) (*RoverPosition, error)
	mustEmbedUnimplementedMarsRoverNavigateServiceServer()
}

// UnimplementedMarsRoverNavigateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMarsRoverNavigateServiceServer struct {
}

func (UnimplementedMarsRoverNavigateServiceServer) Rotate(context.Context, *RotateReq) (*RoverPosition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rotate not implemented")
}
func (UnimplementedMarsRoverNavigateServiceServer) GoForward(context.Context, *GoForwardReq) (*RoverPosition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoForward not implemented")
}
func (UnimplementedMarsRoverNavigateServiceServer) mustEmbedUnimplementedMarsRoverNavigateServiceServer() {
}

// UnsafeMarsRoverNavigateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarsRoverNavigateServiceServer will
// result in compilation errors.
type UnsafeMarsRoverNavigateServiceServer interface {
	mustEmbedUnimplementedMarsRoverNavigateServiceServer()
}

func RegisterMarsRoverNavigateServiceServer(s grpc.ServiceRegistrar, srv MarsRoverNavigateServiceServer) {
	s.RegisterService(&MarsRoverNavigateService_ServiceDesc, srv)
}

func _MarsRoverNavigateService_Rotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarsRoverNavigateServiceServer).Rotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MarsRoverNavigateService/Rotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarsRoverNavigateServiceServer).Rotate(ctx, req.(*RotateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarsRoverNavigateService_GoForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoForwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarsRoverNavigateServiceServer).GoForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MarsRoverNavigateService/GoForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarsRoverNavigateServiceServer).GoForward(ctx, req.(*GoForwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MarsRoverNavigateService_ServiceDesc is the grpc.ServiceDesc for MarsRoverNavigateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarsRoverNavigateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MarsRoverNavigateService",
	HandlerType: (*MarsRoverNavigateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rotate",
			Handler:    _MarsRoverNavigateService_Rotate_Handler,
		},
		{
			MethodName: "GoForward",
			Handler:    _MarsRoverNavigateService_GoForward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
